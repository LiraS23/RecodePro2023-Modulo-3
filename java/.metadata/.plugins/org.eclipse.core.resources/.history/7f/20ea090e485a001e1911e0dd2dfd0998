package br.com.crud.main;

import br.com.crud.dao.ClienteDAO;
import br.com.crud.dao.PacoteDAO;
import br.com.crud.dao.PedidoDAO;
import br.com.crud.factory.ConnectionFactory;
import br.com.crud.model.Cliente;
import br.com.crud.model.Pacote;
import br.com.crud.model.Pedido;

import java.math.BigDecimal;
import java.sql.Connection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

public class Terminal {

    public static void main(String[] args) {
        try {
            Connection conexao = ConnectionFactory.createConnectionToMySQL();
            ClienteDAO clienteDAO = new ClienteDAO(conexao);
            PacoteDAO pacoteDAO = new PacoteDAO(conexao);
            PedidoDAO pedidoDAO = new PedidoDAO(conexao);

            Scanner scanner = new Scanner(System.in);

            int escolha;
            do {
                System.out.println("Escolha uma opção:");
                System.out.println("1 - Cliente");
                System.out.println("2 - Pacote");
                System.out.println("3 - Pedido");
                System.out.println("0 - Sair");
                escolha = scanner.nextInt();
                scanner.nextLine(); // Consumir a quebra de linha

                switch (escolha) {
                    case 1:
                        menuCliente(clienteDAO, scanner);
                        break;
                    case 2:
                        menuPacote(pacoteDAO, scanner);
                        break;
                    case 3:
                        menuPedido(pedidoDAO, scanner);
                        break;
                    case 0:
                        System.out.println("Saindo...");
                        break;
                    default:
                        System.out.println("Opção inválida.");
                }
            } while (escolha != 0);

            conexao.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void menuCliente(ClienteDAO clienteDAO, Scanner scanner) {
        int escolha;
        do {
            System.out.println("\nMenu Cliente:");
            System.out.println("1 - Adicionar Cliente");
            System.out.println("2 - Listar Clientes");
            System.out.println("3 - Atualizar Cliente");
            System.out.println("4 - Excluir Cliente");
            System.out.println("0 - Voltar");
            escolha = scanner.nextInt();
            scanner.nextLine(); // Consumir a quebra de linha

            switch (escolha) {
                case 1:
                    adicionarCliente(clienteDAO, scanner);
                    break;
                case 2:
                    listarClientes(clienteDAO);
                    break;
                case 3:
                    atualizarCliente(clienteDAO, scanner);
                    break;
                case 4:
                    excluirCliente(clienteDAO, scanner);
                    break;
                case 0:
                    System.out.println("Voltando ao menu principal...");
                    break;
                default:
                    System.out.println("Opção inválida.");
            }
        } while (escolha != 0);
    }

    private static void adicionarCliente(ClienteDAO clienteDAO, Scanner scanner) {
        Cliente cliente = new Cliente();
        System.out.println("Informe o CPF do cliente:");
        cliente.setCpf(scanner.nextLine());
        System.out.println("Informe o nome do cliente:");
        cliente.setNome(scanner.nextLine());
        System.out.println("Informe a data de nascimento (AAAA-MM-DD):");
        cliente.setDataNasc(java.sql.Date.valueOf(scanner.nextLine()));
        System.out.println("Informe o email do cliente:");
        cliente.setEmail(scanner.nextLine());

        if (clienteDAO.adicionarCliente(cliente)) {
            System.out.println("Cliente adicionado com sucesso!");
        } else {
            System.out.println("Erro ao adicionar cliente.");
        }
    }

    private static void listarClientes(ClienteDAO clienteDAO) {
        List<Cliente> clientes = clienteDAO.listarClientes();
        if (clientes.isEmpty()) {
            System.out.println("Nenhum cliente encontrado.");
        } else {
            System.out.println("\nLista de Clientes:");
            for (Cliente cliente : clientes) {
                System.out.println("CPF: " + cliente.getCpf());
                System.out.println("Nome: " + cliente.getNome());
                System.out.println("Data de Nascimento: " + cliente.getDataNasc());
                System.out.println("Email: " + cliente.getEmail());
                System.out.println("------------------------");
            }
        }
    }

    private static void atualizarCliente(ClienteDAO clienteDAO, Scanner scanner) {
        System.out.println("Informe o CPF do cliente que deseja atualizar:");
        String cpf = scanner.nextLine();
        Cliente clienteExistente = clienteDAO.obterClientePorCPF(cpf);

        if (clienteExistente != null) {
            System.out.println("Informe o novo nome do cliente:");
            clienteExistente.setNome(scanner.nextLine());
            System.out.println("Informe a nova data de nascimento (AAAA-MM-DD):");
            clienteExistente.setDataNasc(java.sql.Date.valueOf(scanner.nextLine()));
            System.out.println("Informe o novo email do cliente:");
            clienteExistente.setEmail(scanner.nextLine());

            if (clienteDAO.atualizarCliente(clienteExistente)) {
                System.out.println("Cliente atualizado com sucesso!");
            } else {
                System.out.println("Erro ao atualizar cliente.");
            }
        } else {
            System.out.println("Cliente não encontrado.");
        }
    }

    private static void excluirCliente(ClienteDAO clienteDAO, Scanner scanner) {
        System.out.println("Informe o CPF do cliente que deseja excluir:");
        String cpf = scanner.nextLine();
        Cliente clienteExistente = clienteDAO.obterClientePorCPF(cpf);

        if (clienteExistente != null) {
            if (clienteDAO.excluirCliente(cpf)) {
                System.out.println("Cliente excluído com sucesso!");
            } else {
                System.out.println("Erro ao excluir cliente.");
            }
        } else {
            System.out.println("Cliente não encontrado.");
        }
    }

    private static void menuPacote(PacoteDAO pacoteDAO, Scanner scanner) {
        int escolha;
        do {
            System.out.println("\nMenu Pacote:");
            System.out.println("1 - Adicionar Pacote");
            System.out.println("2 - Listar Pacotes");
            System.out.println("3 - Atualizar Pacote");
            System.out.println("4 - Excluir Pacote");
            System.out.println("0 - Voltar");
            escolha = scanner.nextInt();
            scanner.nextLine(); // Consumir a quebra de linha

            switch (escolha) {
                case 1:
                    adicionarPacote(pacoteDAO, scanner);
                    break;
                case 2:
                    listarPacotes(pacoteDAO);
                    break;
                case 3:
                    atualizarPacote(pacoteDAO, scanner);
                    break;
                case 4:
                    excluirPacote(pacoteDAO, scanner);
                    break;
                case 0:
                    System.out.println("Voltando ao menu principal...");
                    break;
                default:
                    System.out.println("Opção inválida.");
            }
        } while (escolha != 0);
    }

    private static void adicionarPacote(PacoteDAO pacoteDAO, Scanner scanner) {
        Pacote pacote = new Pacote();
        System.out.println("Informe o destino do pacote:");
        pacote.setDestino(scanner.nextLine());
        System.out.println("Informe o valor da diária do pacote:");
        pacote.setValorDiaria(new BigDecimal(scanner.nextLine()));

        if (pacoteDAO.adicionarPacote(pacote)) {
            System.out.println("Pacote adicionado com sucesso!");
        } else {
            System.out.println("Erro ao adicionar pacote.");
        }
    }

    private static void listarPacotes(PacoteDAO pacoteDAO) {
        List<Pacote> pacotes = pacoteDAO.listarPacotes();
        if (pacotes.isEmpty()) {
            System.out.println("Nenhum pacote encontrado.");
        } else {
            System.out.println("\nLista de Pacotes:");
            for (Pacote pacote : pacotes) {
                System.out.println("ID do Pacote: " + pacote.getIdPacote());
                System.out.println("Destino: " + pacote.getDestino());
                System.out.println("Valor da Diária: " + pacote.getValorDiaria());
                System.out.println("------------------------");
            }
        }
    }

    private static void atualizarPacote(PacoteDAO pacoteDAO, Scanner scanner) {
        System.out.println("Informe o ID do pacote que deseja atualizar:");
        int idPacote = scanner.nextInt();
        Pacote pacoteExistente = pacoteDAO.obterPacotePorId(idPacote);
        scanner.nextLine(); // Consumir a quebra de linha

        if (pacoteExistente != null) {
            System.out.println("Informe o novo destino do pacote:");
            pacoteExistente.setDestino(scanner.nextLine());
            System.out.println("Informe o novo valor da diária do pacote:");
            pacoteExistente.setValorDiaria(new BigDecimal(scanner.nextLine()));

            if (pacoteDAO.atualizarPacote(pacoteExistente)) {
                System.out.println("Pacote atualizado com sucesso!");
            } else {
                System.out.println("Erro ao atualizar pacote.");
            }
        } else {
            System.out.println("Pacote não encontrado.");
        }
    }

    private static void excluirPacote(PacoteDAO pacoteDAO, Scanner scanner) {
        System.out.println("Informe o ID do pacote que deseja excluir:");
        int idPacote = scanner.nextInt();
        scanner.nextLine(); // Consumir a quebra de linha
        Pacote pacoteExistente = pacoteDAO.obterPacotePorId(idPacote);

        if (pacoteExistente != null) {
            if (pacoteDAO.excluirPacote(idPacote)) {
                System.out.println("Pacote excluído com sucesso!");
            } else {
                System.out.println("Erro ao excluir pacote.");
            }
        } else {
            System.out.println("Pacote não encontrado.");
        }
    }


    private static void menuPedido(PedidoDAO pedidoDAO, Scanner scanner) {
        int escolha;
        do {
            System.out.println("\nMenu Pedido:");
            System.out.println("1 - Adicionar Pedido");
            System.out.println("2 - Listar Pedidos");
            System.out.println("3 - Atualizar Pedido");
            System.out.println("4 - Excluir Pedido");
            System.out.println("0 - Voltar");
            escolha = scanner.nextInt();
            scanner.nextLine(); // Consumir a quebra de linha

            switch (escolha) {
                case 1:
                    adicionarPedido(pedidoDAO, null, scanner);
                    break;
                case 2:
                    listarPedidos(pedidoDAO);
                    break;
                case 3:
                    atualizarPedido(pedidoDAO, scanner);
                    break;
                case 4:
                    excluirPedido(pedidoDAO, scanner);
                    break;
                case 0:
                    System.out.println("Voltando ao menu principal...");
                    break;
                default:
                    System.out.println("Opção inválida.");
            }
        } while (escolha != 0);
    }

    private static void adicionarPedido(PedidoDAO pedidoDAO, PacoteDAO pacoteDAO, Scanner scanner) {
        Pedido pedido = new Pedido();
        System.out.println("Informe a data do pedido (AAAA-MM-DD):");
        
        // Ler a data como string e, em seguida, converter para Date
        String dataPedidoStr = scanner.nextLine();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date dataPedido = dateFormat.parse(dataPedidoStr);
            pedido.setDataPedido(dataPedido);
        } catch (ParseException e) {
            System.out.println("Formato de data inválido. Use o formato AAAA-MM-DD.");
            return; // Saia do método se a data for inválida
        }

        System.out.println("Informe a quantidade de diárias do pedido:");
        pedido.setDiariasPedido(scanner.nextInt());
        scanner.nextLine(); // Consumir a quebra de linha

        // Obtenha o ID do pacote associado ao pedido
        System.out.println("Informe o ID do pacote associado ao pedido:");
        int idPacote = scanner.nextInt();
        scanner.nextLine(); // Consumir a quebra de linha

        // Use o ID do pacote para buscar o valor da diária no PacoteDAO
        Pacote pacote = pacoteDAO.obterPacotePorId(idPacote);
        if (pacote == null) {
            System.out.println("Pacote não encontrado.");
            return; // Saia do método se o pacote não for encontrado
        }

        // Calcule o valor total do pedido com base no valor da diária e no número de diárias
        BigDecimal valorDiaria = pacote.getValorDiaria();
        int diariasPedido = pedido.getDiariasPedido();
        BigDecimal valorTotal = valorDiaria.multiply(BigDecimal.valueOf(diariasPedido));
        pedido.setValorPedido(valorTotal);

        System.out.println("Informe o CPF do cliente associado ao pedido:");
        pedido.setFk_cliente_cpf(scanner.nextLine());

        if (pedidoDAO.adicionarPedido(pedido)) {
            System.out.println("Pedido adicionado com sucesso!");
        } else {
            System.out.println("Erro ao adicionar pedido.");
        }
    }



    private static void listarPedidos(PedidoDAO pedidoDAO) {
        List<Pedido> pedidos = pedidoDAO.listarPedidos();
        if (pedidos.isEmpty()) {
            System.out.println("Nenhum pedido encontrado.");
        } else {
            System.out.println("\nLista de Pedidos:");
            for (Pedido pedido : pedidos) {
                System.out.println("ID do Pedido: " + pedido.getIdPedido());
                System.out.println("Data do Pedido: " + pedido.getDataPedido());
                System.out.println("Diárias do Pedido: " + pedido.getDiariasPedido());
                System.out.println("Valor do Pedido: " + pedido.getValorPedido());
                System.out.println("ID do Pacote Associado: " + pedido.getFk_pacote_idPacote());
                System.out.println("CPF do Cliente Associado: " + pedido.getFk_cliente_cpf());
                System.out.println("------------------------");
            }
        }
    }

    private static void atualizarPedido(PedidoDAO pedidoDAO, Scanner scanner) {
        System.out.println("Informe o ID do pedido que deseja atualizar:");
        int idPedido = scanner.nextInt();
        scanner.nextLine(); // Consumir a quebra de linha
        Pedido pedidoExistente = pedidoDAO.obterPedidoPorId(idPedido);

        if (pedidoExistente != null) {
            System.out.println("Informe a nova data do pedido (AAAA-MM-DD):");
            pedidoExistente.setDataPedido(new Date(scanner.nextLine()));
            System.out.println("Informe a nova quantidade de diárias do pedido:");
            pedidoExistente.setDiariasPedido(scanner.nextInt());
            scanner.nextLine(); // Consumir a quebra de linha
            System.out.println("Informe o novo valor do pedido:");
            pedidoExistente.setValorPedido(new BigDecimal(scanner.nextLine()));
            System.out.println("Informe o novo ID do pacote associado ao pedido:");
            pedidoExistente.setFk_pacote_idPacote(scanner.nextInt());
            scanner.nextLine(); // Consumir a quebra de linha
            System.out.println("Informe o novo CPF do cliente associado ao pedido:");
            pedidoExistente.setFk_cliente_cpf(scanner.nextLine());

            if (pedidoDAO.atualizarPedido(pedidoExistente)) {
                System.out.println("Pedido atualizado com sucesso!");
            } else {
                System.out.println("Erro ao atualizar pedido.");
            }
        } else {
            System.out.println("Pedido não encontrado.");
        }
    }

    private static void excluirPedido(PedidoDAO pedidoDAO, Scanner scanner) {
        System.out.println("Informe o ID do pedido que deseja excluir:");
        int idPedido = scanner.nextInt();
        scanner.nextLine(); // Consumir a quebra de linha
        Pedido pedidoExistente = pedidoDAO.obterPedidoPorId(idPedido);

        if (pedidoExistente != null) {
            if (pedidoDAO.excluirPedido(idPedido)) {
                System.out.println("Pedido excluído com sucesso!");
            } else {
                System.out.println("Erro ao excluir pedido.");
            }
        } else {
            System.out.println("Pedido não encontrado.");
        }
    }

}
